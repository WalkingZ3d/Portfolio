import { Project } from "./Project";

export const PROJECTS: Project[] = [
    {
        id: 0,
        title: 'Calorie Tracker',
        link: 'calorie-tracker',
        url: 'https://dan-calorie-tracker.herokuapp.com/',
        GitHub: 'https://github.com/WalkingZ3d/CalorieTracker2',
        summary: 'A fullstack application for tracking calories. This app uses an Express.js backend, NoSql database (with MongoDB) and serves EJS files for the frontend views whilst employing an MVC model for seperation of concerns and CRUD functionality.',
        description: 'A fullstack application for tracking calories. This app uses an Express.js backend, NoSql database (with MongoDB) and serves EJS files for the frontend views whilst employing an MVC model for seperation of concerns and CRUD functionality.',
        picture: '../../../assets/images/calorieTracker/calorieTracker.png',
        stamp: '../../../assets/images/stamps/personal-pink-clear.png',
        framework: '../../../assets/images/frameworkIcons/node-logo.png',
        screenshot1: '../../../assets/images/calorieTracker/calorieTracker.png',
        screenshot1Description: 'Index Page',
        screenshot2: '../../../assets/images/calorieTracker/screenshot-2.png',
        screenshot2Description: 'Login form',
        screenshot3: '../../../assets/images/calorieTracker/screenshot-3.png',
        screenshot3Description: 'Signup form',
        screenshot4: '../../../assets/images/calorieTracker/screenshot-4.png',
        screenshot4Description: 'A form displaying the custom error handling to users, invalid password (too short) on signup in this example.',
        screenshot5: '../../../assets/images/calorieTracker/screenshot-5.png',
        screenshot5Description: 'List of days.',
        screenshot6: '../../../assets/images/calorieTracker/screenshot-6.png',
        screenshot6Description: 'Server side error handling when trying to make a day that already exists.',
        screenshot7: '../../../assets/images/calorieTracker/screenshot-7.png',
        screenshot7Description: 'A new page for each new week.',
        screenshot8: '../../../assets/images/calorieTracker/screenshot-8.png',
        screenshot8Description: 'The entry for a day before any food is added',
        screenshot9: '../../../assets/images/calorieTracker/screenshot-9.png',
        screenshot9Description: 'The form used to add food.',
        screenshot10: '../../../assets/images/calorieTracker/screenshot-10.png',
        screenshot10Description: 'The same day entry as before after some food items have been added.',
        screenshot11: '../../../assets/images/calorieTracker/screenshot-11.png',
        screenshot11Description: 'MUST ADD THIS FUNCTIONALITY. The entry after a user has clicked the delete icon to remove a food object from this day.',
        code1: '../../../assets/images/calorieTracker/code-1.png',
        code1Description: 'The sever instance and routes for the backend of the application. As this app is designed to scale with more functionality, the MVC model has been used to allow for a structured folder and file system which enables far easier addition of new code. The middleware on line 68, causes all GET routes to check if a user is logged in before sending any resources. As seen below, some routes will "requireAuth", implementing required login state for certain areas of the application. Currently, the required routes are the "indexRoutes" for the home page, "authRoutes" to handle user login and "calorieRoutes" that handle requests from the front end in regards to the calorie tracking. Lines 75-77 show the catch-all used to allow the display of a custom 404 page if the user naviagates away from the avilable routes.',
        code2: '../../../assets/images/calorieTracker/code-2.png',
        code2Description: 'Middleware for the authentication. When users are logged in, a cookie is saved with the corresponding JSON Web Token (JWT) which this middle ware uses in each function. "requireAuth" checks for a cookie and goes to the next process in the stack with line 24 if it is valid, however if it doesnt not exist or is invalid, the user is redirecetd to the login page. This is applied to every endpoint that needs to be hidden from a non-logged in user - such as the page that displays eaten food. "checkUser" sets the local variable of "user" to the username if found so it can be displayed on the page in the header, if a user is not logged in this function simply passes the process along the stack with the user as null.',
        code3:  '../../../assets/images/calorieTracker/code-3.png',
        code3Description: 'A basic example from the controller, this is the index controller method called on a GET request to "/" and simply returns the index page. The EJS template for frontend views allows variables to be easily passed from the backend to the frontend. In this example the page title is set as "Home" and so the tab in the broswer will read "Calorie Tracker | Home". ',
        code4:  '../../../assets/images/calorieTracker/code-4.png',
        code4Description: 'User authentication for this application requires the following routes, none of which include the "requireAuth" middleware. The function for each route can be found within the controller for authentication.',
        code5:  '../../../assets/images/calorieTracker/code-5.png',
        code5Description: 'Both of the GET requests respond with the approriate form to either login or create a new account. The signup form sends a POST request to "/signup" to add a new user where the controller function first deconstructs the request body to aquire the email, username and password. With this information, the a new "User" is added to the database and the token is created with their JWT, lasting 3 days after which the user will have to login back in. Similarly, the login form sends a POST request to "/login" where the User Schema\'s static method "login" is called to authenticate if that user exists in the database. If successful, the JWT cookie is created as before. In both cases, an unsuccessful login or signup will return a custom error handling object as seen below. To logout the cookie lifetime is set to 1 millisecond and so effectively is deleted.',
        code6:  '../../../assets/images/calorieTracker/code-6.png',
        code6Description: 'When a user tries to login with an account that doesnt exist or signup with an already taken username, the database queries will fail and return an error. To aid the user, the exact nature of the failure is added to an error object sent back to the frontend after a failed POST request, allowing the frontend to display the error clearly.',
        code7:  '../../../assets/images/calorieTracker/code-7.png',
        code7Description: 'The Schema for creating new user objects within the users document in the database. Each will have a required email, username and password with server side validations such as minimum length and email mongoose email validation. NoSQL was chosen for this project as it allows for easy nesting of objects within the database. This is seen here where each user is assigned a day property with the type of an array of "daySchema" objects.',
        code8:  '../../../assets/images/calorieTracker/code-8.png',
        code8Description: 'Mongoose allows for Schemas to have Hooks such as before and after saving a new object to the database. I have added a pre Hook to salt and hash passwords using the bcrypt library, which is an essential feature for security as it prevents user passwords being vunerable to data leaks or unauthorizied access as the .env file contains the JWT secret and is not uploaded to the GitHub thanks to .gitignore.',
        code9:  '../../../assets/images/calorieTracker/code-9.png',
        code9Description: 'The "Day" Schema the template for day objects to be added to each user. As such, each contains a "userId" which associates it with the logged in user. This is not unique as there is a One to Many relationship occuring, where each user may have many days of tracking but each day object can only be associated with a single user. "dayId" is unique so no 2 day objects can be added for each user and is created by appending the "userId" onto the current day number - e.g. for user 777, day 1 would have the "dayId" 1777. Similarly to users, each day can contain foods, which is added as an array of food objects. It is not required as when it was required, no new days could be created without having already having food and since you cannot create a food object before a day, no new days would be added. The static method "findByUserId" was created to allow the calorie controller to return a day for a user given the "userId". Previously I was trying to use "findById" but this is a built in Mongoose method that uses the auto generated "_id" and so was causing errors. This allows the day to be found easily for use in the calorie controller.',
        code10: '../../../assets/images/calorieTracker/code-10.png',
        code10Description: 'For food, the "userDayId" field is populated with the "dayId" with the associated day with "-Number" appended. E.g. if user 777 added an apple to day 1, "userDayId" would be 1777-1. The name of each food added an calorie amount is aquired from an external database when the food is added via POST requets to "/calorie" in the backend to protect my API key located in the .env file.',
        code11: '../../../assets/images/calorieTracker/code-11.png',
        code11Description: 'The header partial is applied to all pages and contains conditonal rendering between lines 33 and 48. If a user exists as seen previously from the authentication middleware, then display "Welcome username" and the logout button, else the login and signup buttons.',
        code12: '../../../assets/images/calorieTracker/code-12.png',
        code12Description: 'An example of an EJS template. The partials included in each page are the header and footer components located in a seperate folder/file, similar to React or Angular. This pacticular page is for the login form.',
    },
    {
        id: 1,
        title: 'Jigsaw Helper',
        GitHub: 'https://github.com/WalkingZ3d/JigsawHelper',
        summary: 'A Java application designed to help with jigsaw puzzles. The application is not web-based, but instead ran from the command line by the complier. This project was my dissertation for  my masters in Computer Science.',
        description: 'A Java application designed to help with jigsaw puzzles. The application is not web-based, but instead ran from the command line by the complier. This project was my dissertation for  my masters in Computer Science.',
        picture: '../../../assets/images/jigsawHelper/gui.png',
        stamp: '../../../assets/images/stamps/personal-pink-clear.png',
        framework: '../../../assets/images/frameworkIcons/java-logo.png',
        screenshot1: '../../../assets/images/jigsawHelper/gui.png',
        screenshot1Description: 'The GUI for this Java application. The application interface is split into the 3 key areas: "The Finished Puzzle", "The Indivdiual Piece" and "The Location!!!!". In the top left, a user can upload an image of the puzzle (such as from the box), see more information and view the full size image. The same functionality occurs where the user is invited to upload the puzzle piece they need help locating. The location section is where the user will recieve the answer to the loaction of the piece within the finished image, only once the 2 uploads have been carried out.',
        screenshot2: '../../../assets/images/jigsawHelper/screenshot-2.png',
        screenshot2Description: 'After clicking on the "Find Piece" button, the program will draw a red box around the area most likely to contain the location of the piece. This is an example of a color search (conducted as there are no edges in the puzzle piece), which resulted in an excellent red box with the colour search because the colour in the piece was so vivid and unique to that area of the finished image.',
        screenshot3: '../../../assets/images/jigsawHelper/screenshot-3.png',
        screenshot3Description: 'If the user clicks on the "Click Here To See All Possible Locations" button, a seperate window will open. This window will contain the red box as before (indicating the most likely area) and the mean of the top 10 (if at least 10 possibilities) most likely locations in the blue box. The green box is the exact location and has been manually enetered to test accuracy. With this example, the blue box was skewed to the right by the similar orange colours surrounding the light source of the sun in the finished image, pushing the mean away from the most accurate result. This test also only used 3 locations for the blue box mean result, as the colour search output only 3 suitable locations for the piece. ',
        screenshot4: '../../../assets/images/jigsawHelper/screenshot-4.png',
        screenshot4Description: 'Another testing picture, The Zed image, has a bright center on the edge piece chosen which is surrounded by other sharp edges clearly influencing the greyscale pixel values as all 3 boxes feature it prominently. ',
        screenshot5: '../../../assets/images/jigsawHelper/screenshot-5.png',
        screenshot5Description: 'The greyscale search for this image yeilded more than 10 possibilites for location, and so the top 10 would have been used for the blue box.',
        screenshot6: '../../../assets/images/jigsawHelper/screenshot-6.png',
        screenshot6Description: 'The accompanying image shows both the greyscale and color searches respectively. The most edge here is the sharp color change from red to black. The color search foudn a more accurate likely location. However, the greyscale search had a better mean result. This is likely due to the color edge being repeated 3 times across the image - as seen by the middle edge being highlighted as mean, whereas the grey scale could not determine between the left/right and right/left edge color shift. The conclusions drawn from this study were that the color array algorigthm was more accurate for determining location as it considered an extra dimension of in the array. However, this caused a slower runtime - so the edge detction allowed the quicker greyscale search to be conducted where possible. The compression lossy suffered by images when uploaded to the applicationresulted in close but not exact matches. This uncertainty causes unreliability, so an optimisation that decreased the impact of compression lossy would be very beneficial.',
        code1: '../../../assets/images/jigsawHelper/code-1.png',
        code1Description: 'The method called by the completedFindButton() method in the GUI class CreateInterface to show the user where the piece fits, returning the LinkedHashMap "sortedMap" that contains all of the possible locations ranked by score (lower mean squared error is a better score) required to draw the rectangle onto the finished image. Initially the sobelDetector() method is called to acquire the edge flag Boolean so the program knows whether to use the coloured 3d array or greyscale 2d array for the search. The threshold for the mean squared error is lower for the colour array as it is a more thorough search and therefore must have a stricter criteria to be considered a possible location. The "sortedMap" LinkedHashMap is where the possible locations for the piece are stored, ordered by their mean square error score, so the most likely piece is at the first part of the array.',
        code2: '../../../assets/images/jigsawHelper/code-2.png',
        code2Description: 'The method begins by creating an array of integers the size of the image supplied to it and using nested for loops to iterate through both column (x) and row (y). The value of each pixel’s RGB colour is then calculated for a 3x3 grid from row 0 column 0 to row 2 column 2. The size of the grid of pixels created is 3x3 so it can be passed into the edge detection logic. Both the horizontal and vertical edge detection are calculated using the appropriate operator. The Sobel operator is the computer vision chosen as it is the most effective at creating an image that shows the edges that were originally in the image. The 3x3 operation calculations using convolution to acquire a gradient that can be used to construct a greyscale image. For this application, the gradient is added to a 2d array for use in the search algorithm later in the process. This method also contains the flag setter, which will determine which of the search method will be used, colour if false and greyscale if true. The method takes the parameter of Boolean type ‘isPiece’ which means the flag section is only accessed when supplied with the piece image and not the final image. The Sobel operator produces an image with values based heavily on whether an edge exists, and therefore the pixels array will contain values above the given ‘minRequiredToFlag’ threshold of 100 if the greyscale image is the appropriate procedure for finding this particular piece. The greyscale of the final image will be compared against the piece greyscale array of the piece for the search. The field ‘pieceEdgesFlag’ is altered which tells the launch() method which method to call.',
        code3:  '../../../assets/images/jigsawHelper/code-3.png',
        code3Description: 'Once the greyscale image has been selected by the edge flag, the launch() method calls the following method to search for the location of the greyscale piece within the greyscale final image. Since both images (piece and final) are greyscale, the arrays they are contained in are 2d, so the search is relatively quick compared to the coloured search. A new 2d array is made for the comparator to find the location. This is created by copying the specified range of the 2d final image array into the new comparator array, the size of this cut is equal to the piece array size. The matching comparator array size with the piece array size allows the mean squared error logic in the method below to iterate across the final image comparing the exact piece size for each new line of pixels in the final image. Once the meanSquaredError() method has found the likely position, the Map object is populated with locations and scores.',
        code4:  '../../../assets/images/jigsawHelper/code-4.png',
        code4Description: 'The code within the meanSquaredErrorGreyScale() method is the translation of the mean squared error formula (MSE = (1/n) * Σ(actual – forecast)2) to Java for use in the search. As called by searchImageGreyScale(), the comparator array minus the ‘subImageArray’ (piece 2d array) is fed into the mean squared error formula to acquire the error value. The error is then squared and divided by (x*y axis) of the image. The return of this method is the mean squared error after these calculations are completed. The ‘pieceLocationsAndScores’ Map now contains the mean squared error as the score, where the closer to 0 the value the more likely the piece is in that location - a better score. Due to the compression lossy that occurs with images, the mean squared error is needed as the location will never be 100% certain, otherwise the search would just be the final image array minus the comparator at each pixel location until the result is 0. Since this will not occur as explained, the mean squared error is the perfect compromise of certainty with mathematical confidence without an exact match, the score is a sufficient marker for accuracy.',
        code5:  '../../../assets/images/jigsawHelper/code-5.png',
        code5Description: 'Alternatively, if the color array is required, the getColourArray() method is called. This populates a 3d array with the pixel values of Red, Green and Blue for each pixel within the image supplied to it as a parameter.',
        code6:  '../../../assets/images/jigsawHelper/code-6.png',
        code6Description: 'The searchImageColour() method has a very similar functionality to the greyscale version, with the major difference being the 3d array for the colour array.',
        code7:  '../../../assets/images/jigsawHelper/code-7.png',
        code7Description: 'The meanSquareErrorColour() method again has very similar functionality to the greyscale version, with the colour version using a 3d array.',
        code8:  '../../../assets/images/jigsawHelper/code-8.png',
        code8Description: 'Once the algorithm has determined the location of the piece within the finished image, the application then draws the location as a box for the user to see the result of the computation. Since the algorithm also can supply more than one method of retrieving the result through taking a mean of results based on mean squared error, there are other methods with the same functionality that draw a different colour box.',
        code9:  '../../../assets/images/jigsawHelper/code-9.png',
        code9Description: 'This button is where the two classes link together, with the actionPerformed() method using a try/catch clause to call the launch() method from the LocationAlgorithm class. The resulting LinkedHashMap, ‘sortedMap’, populated by the launch() method uses the first 2 elements as the x and y coordinates for the top left of the box. The drawLocationRed() methoD is then called with the parameters using the most likely position of the piece, as the first x and y coordinates in the ‘answers’ array have the smallest mean squared error. The method also sets the fields ‘xCoord2’ and ‘yCoord2’ for use in the completedFullSizeButton by totalling the values of each x and y coordinate for the top  10 most likely positions (based on mean square error score) and putting the mean into an ArrayList for x and for y. The top 10 were chosen to represent the mean as some tests returned far too many answers for an accurate and representative mean, so the number is limited to 10. If the total number of locations found is less than 10, all options are considered in the mean calculations. Each of the positionOfPiece variables is the type cast array value from the correct value in the LinkedHashMap returned by LocationAlgorithm launch().',
        code10: '../../../assets/images/jigsawHelper/code-10.png',
        code10Description: 'An example of how the Java GUI elements are styled. The purpose of the completedFullSizeButton to also show the user other possible locations, seen by the ‘setText("Click Here To See All Possible Locations")’ method invoked on the button. The button shows the user the finished image in its full size in a new window along with as blue box that uses the fields ‘xCoord2’ and ‘yCoord2’ to draw a blue box around the mean of all possible locations. This method also redraws the same red box as before on the new window image.',
        code11: '../../../assets/images/jigsawHelper/code-11.png',
        code11Description: 'When a new piece is uploaded, the height and width are added to a global variable within this class. This allows the draw method to be draw a box the exact same size as the piece image.',
    },
    {
        id: 2,
        title: 'GitHub Searcher',
        url: 'https://dan-react-github-search.netlify.app/',
        GitHub: 'https://github.com/WalkingZ3d/github-tracker',
        summary: 'A React front-end exclusive application to search for a given users repositories. This application makes uses of React routing, state, reducers amd useEffect() Hooks to achieve its result.',
        description: 'A React front-end exclusive application to search for a given users repositories. This application makes uses of React routing, state, reducers amd useEffect() Hooks to achieve its result.',
        picture: '../../../assets/images/repoSearcher/main-screenshot.png',
        stamp: '../../../assets/images/stamps/personal-pink-clear.png',
        framework: '../../../assets/images/frameworkIcons/react-logo.png',
        screenshot1: '../../../assets/images/repoSearcher/main-screenshot.png',
        screenshot1Description: 'The homepage for the GitHub repository searcher. To use, simply enter a valid GitHub username and press the "Search" button. This will fire a GET request using axios to the GitHub API to retrieve the publicly listed repositories for that user.',
        screenshot2: '../../../assets/images/repoSearcher/screenshot-2.png',
        screenshot2Description: 'Once the GitHub API has been called, the page is populated with all of the titles of thats user\'s repositories. The user may choose how many results they want per page and use the "Next" and "Prev" buttons to navigate between pages of repositories. This page also includes a reset search button to allow a fresh search to be undertaken. When a user clicks on one of the titles, they are redirected to a new page with the searched username and title of the clicked repository in the URL parameters',
        screenshot3: '../../../assets/images/repoSearcher/screenshot-3.png',
        screenshot3Description: 'The page for information on each repository uses the URL parameters of username and repository title to make an axios GET request for data about said repository. This information is then slotted into a custom card component and displayed to the user.',
        screenshot4: '../../../assets/images/repoSearcher/screenshot-4.png',
        screenshot4Description: 'This page takes advantage of React Routing to provide the user with a custom 404 page if they navigate to a non-existant route.',
        code1: '../../../assets/images/repoSearcher/code-1.png',
        code1Description: 'This useEffect() React Hook is located in the source code for the "Search" page and fires whenever a new username is searched. The asynchronous function, seen between lines 20 and 29, makes a call to the GitHub API to update both the reposCount (number of repositories for that username) and ownerName (username) React States - and is called recursively on line 31. This method of nested async function is necessary as the useEffect itself cannot be asynchronous. ',
        code2: '../../../assets/images/repoSearcher/code-2.png',
        code2Description: 'This useEffect() is also located in the source code for the "Search" page and fires whenever the number of pages are changed, username is changed or a new page is navigated to. The async function, seen between lines 44 and 62, sets the number of pages required (lines 46 and 47) and calls the API to get as many repositories as each page will show. This function is also called recursively within the useEffect.',
        code3: '../../../assets/images/repoSearcher/code-3.png',
        code3Description: 'The function renderRepos(), lines 86-88, maps the gathered repository data to <li> elements for display on the page. Each one will navigate to the username/repositoryName upon click as the map allows for each link to use the title as a URL Parameter. RenderRepos() is called in the HTML return of this page. The 2 functions underneath (lines 90 - 105) handle the pagination controls of the Search page. Since the number of pages changes based on the user selection from a dropdown, these 2 functions use States to determine whether page navigation is possible or not. ',
        code4: '../../../assets/images/repoSearcher/code-4.png',
        code4Description: 'When the user clicks on a repository to see more information on the Search page, the username and repository name are added as URL parameters. On the Results page, the useParams() Hook (seen on line 9) is used to grab those peices of data for later use. The useEffect(), shown between lines 14 and 25, is fired whenever the name changes - which is upon navigation to the page. The async function within then makes a call to the GitHub API to gather data about that paticular repository and add it to the empty object of RepoData seen on line 10. A card is then generated for the data between lines 29 and 31.',
        code5: '../../../assets/images/repoSearcher/code-5.png',
        code5Description: 'The App uses React Routing to allow the user to believe they are moving between pages. Line 9 adds the basic layout of Header and Footer to all pages. Lines 10 - 15 are the nested routes required to allow the URL parameters to move to username/repositoryTitle and show the information to the user. Line 16 navigates the user to an about page where they can learn how to use the app. The final route on line 17 acts as a catch all to display a 404 page if the user tries to move to a URL that does not exist within the application.',
    },
    {
        id: 3,
        title: 'The Motive',
        link: 'calorie-tracker',
        url: 'http://localhost:3000/',
        GitHub: 'https://github.com/WalkingZ3d/CalorieTracker2',
        summary: 'Lorem ipsum, dolor sit amet consectetur adipisicing elit. Recusandae enim cum similique voluptas nulla? Repellat autem, incidunt magni culpa non illo, soluta quidem fugit voluptas doloremque necessitatibus at optio. Ab',
        description: 'Lorem ipsum, dolor sit amet consectetur adipisicing elit. Recusandae enim cum similique voluptas nulla? Repellat autem, incidunt magni culpa non illo, soluta quidem fugit voluptas doloremque necessitatibus at optio. Ab.',
        picture: '../../../assets/images/fnc.png',
        stamp: '../../../assets/images/stamps/collaborative-pink-clear.png',
        framework: '../../../assets/images/frameworkIcons/flask-logo.png',
        screenshot1: '../../../assets/images/calorieTracker/calorieTracker.png',
        screenshot1Description: 'Lorem ipsum, dolor sit amet consectetur adipisicing elit. Recusandae enim cum similique voluptas nulla? Repellat autem, incidunt magni culpa non illo, soluta quidem fugit voluptas doloremque necessitatibus at optio. Ab.',
        screenshot2: '../../../assets/images/calorieTracker/calorieTracker.png',
        screenshot2Description: 'Lorem ipsum, dolor sit amet consectetur adipisicing elit. Recusandae enim cum similique voluptas nulla? Repellat autem, incidunt magni culpa non illo, soluta quidem fugit voluptas doloremque necessitatibus at optio. Ab.',
        screenshot3: '../../../assets/images/calorieTracker/calorieTracker.png',
        screenshot3Description: 'Lorem ipsum, dolor sit amet consectetur adipisicing elit. Recusandae enim cum similique voluptas nulla? Repellat autem, incidunt magni culpa non illo, soluta quidem fugit voluptas doloremque necessitatibus at optio. Ab.',
        code1: '../../../assets/images/fnc.png',
        code1Description: 'Lorem ipsum, dolor sit amet consectetur adipisicing elit. Recusandae enim cum similique voluptas nulla? Repellat autem, incidunt magni culpa non illo, soluta quidem fugit voluptas doloremque necessitatibus at optio. Ab.',
        code2: '../../../assets/images/fnc.png',
        code2Description: 'Lorem ipsum, dolor sit amet consectetur adipisicing elit. Recusandae enim cum similique voluptas nulla? Repellat autem, incidunt magni culpa non illo, soluta quidem fugit voluptas doloremque necessitatibus at optio. Ab.',
        code3: '../../../assets/images/fnc.png',
        code3Description: 'Lorem ipsum, dolor sit amet consectetur adipisicing elit. Recusandae enim cum similique voluptas nulla? Repellat autem, incidunt magni culpa non illo, soluta quidem fugit voluptas doloremque necessitatibus at optio. Ab.',
    },
]